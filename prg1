//bresen line drawing algo
#include<bits/stdc++.h>
#include<GL/glut.h>
using namespace std;

float a1,a2,b1,b2;
float m;
void draw(float x,float y)
{
    glBegin(GL_POINTS);
     glVertex2f(x,y);
     glEnd();
}

void slope1(float x1,float y1,float x2,float y2)
{
       if(x1>x2)
       {
           swap(x1,x2);
           swap(y1,y2);
       }

      float dx=abs(x2-x1),dy=abs(y2-y1);
      float p=2.0*dy-dx;
      float ppos=2*(dy-dx);
      float pneg=2*dy;

       while(x1<=x2)
       {
           x1++;
           if(p<0)
            p+=pneg;
           else
           {
               p+=ppos;
               if(m<0)
                y1--;
               else
                y1++;
           }
           draw(x1,y1);
       }

}

void slope2(float x1,float y1,float x2,float y2)
{
       if(y1>y2)
       {
           swap(x1,x2);
           swap(y1,y2);
       }

      float dx=abs(x2-x1),dy=abs(y2-y1);
      float p=2.0*dx-dy;
      float ppos=2*(dx-dy);
      float pneg=2*dx;

       while(y1<=y2)
       {
           y1++;
           if(p<0)
            p+=pneg;
           else
           {
               p+=ppos;
               if(m<0)
                x1--;
               else
                x1++;
           }
           draw(x1,y1);
       }

}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
     glColor3f(0,1,0);
     glPointSize(4.0);
     if(m>=-1 && m<=1)
     slope1(a1,b1,a2,b2);
     else
        slope2(a1,b1,a2,b2);
     glFlush();
}

void myinit()
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,499,0,499);
    glMatrixMode(GL_MODELVIEW);
}


int main(int argc,char** argv)
{
     cout<<"enter a1,b1,a2,b2 "<<"\n";
     cin>>a1>>b1>>a2>>b2;
     m=(b2-b1)/(a2-a1);
     glutInit(&argc,argv);
     glutInitDisplayMode(GLUT_SINGLE |GLUT_RGB);
     glutInitWindowSize(500,500);
     glutInitWindowPosition(0,0);
     glutCreateWindow("bresem lema");

     myinit();
     glutDisplayFunc(display);
     glutMainLoop();
     return 0;
}
