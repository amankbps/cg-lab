//prespective view prg4
#include <GL/glut.h>
#include <iostream>
using namespace std;

float viewer[] = { 0, 0, 0 };
float v[8][3] = { { -1, -1, -1 }, { 1, -1, -1 }, { 1, 1, -1 }, { -1, 1, -1 }, { -1, -1, 1 }, { 1, -1, 1 }, { 1, 1, 1 }, { -1, 1, 1 } };
float color[8][3] = { { 0, 0, 0 }, { 1, 0, 0 }, { 1, 1, 0 }, { 0, 1, 0 }, { 0, 0, 1 }, { 1, 0, 1 }, { 0, 1, 1 }, { 1, 1, 1 } };

void polygon(int a, int b, int c, int d)
{
    glBegin(GL_POLYGON);
    glColor3fv(color[a]);
    glVertex3fv(v[a]);

    glColor3fv(color[b]);
    glVertex3fv(v[b]);

    glColor3fv(color[c]);
    glVertex3fv(v[c]);

    glColor3fv(color[d]);
    glVertex3fv(v[d]);
    glEnd();
}

void cube()
{
    polygon(0, 1, 2, 3);
    polygon(1, 2, 6, 5);
    polygon(4, 5, 6, 7);
    polygon(0, 4, 7, 3);
    polygon(2, 3, 7, 6);
    polygon(0, 1, 5, 4);
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    gluLookAt(viewer[0], viewer[1], viewer[2], 0, 0, 0, 0, 1, 0);
    cube();
    glFlush();
}

void keys(unsigned char key, int x, int y)
{
    if (key == 'x') viewer[0] += 0.2;
    if (key == 'X') viewer[0] -= 0.2;
    if (key == 'y') viewer[1] += 0.2;
    if (key == 'Y') viewer[1] -= 0.2;
    if (key == 'z') viewer[2] += 0.2;
    if (key == 'Z') viewer[2] -= 0.2;

    glutPostRedisplay();
}

void myinit()
{
    glMatrixMode(GL_PROJECTION);
    glOrtho(-2, 2, -2, 2, -2, 2);
    glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500, 500);
    glutCreateWindow("perspective view of cube");
    myinit();
    glutDisplayFunc(display);
    glutKeyboardFunc(keys);
    glEnable(GL_DEPTH_TEST);
    glutMainLoop();
    return 0;
}
